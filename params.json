{"name":"Kwm","tagline":"[WIP] Tiling window manager with focus follows mouse for OSX","body":"## Description\r\n\r\n*Kwm* started as a simple project to get true focus-follows-mouse support on OSX through event tapping.  \r\nIt is now a tiling window manager that represents windows as the leaves of a binary tree.\r\n\r\n*Kwm* runs a local daemon to read messages and trigger functions.  \r\n*Kwmc* can be used to write to *Kwm*'s socket, and the included hotkeys.cpp uses this program to define  \r\na mapping between keys and these functions. The config file \".kwmrc\" also uses *Kwmc* to apply initial  \r\nsettings upon startup. Because of this, *Kwmc* needs to be placed in your path to ensure that everything  \r\nworks as expected. For information, check the readme located within the *kwmc* folder.  \r\n\r\n*Kwm* uses the event taps API (Quartz Event Services) to observe, filter and alter user input events prior  \r\nto their delivery to a foreground application.\r\n\r\nThis allows for functionality such as focus-follows-mouse, remapping keys, and most importantly global hotkeys  \r\nfor interacting with *Kwm*, and so hotkeys.cpp can and should be customized by the user.  \r\nThe user may use an external program for running a specific command on keypress instead.\r\n\r\nBoth autofocus and autoraise is available, however autofocus only redirects key input to the window below the cursor,\r\nthe menubar is not accessible. By default *Kwm* is set to use autoraise as it is meant to be used alongside\r\nthe tiling functionality, and so windows should not overlap unless a window is specifically made floating.  \r\n\r\n*Multiple monitor support (in progress):*  \r\nThere are two supported ways to move a window between monitors.  \r\nThe first one is by using `kwmc screen -m prev|next|id`.  \r\nThe other option is to make the window floating and manually move it with the mouse, then un-float it.  \r\nMoving a window directly with the mouse WILL BREAK the window-trees of both monitors.  \r\n\r\nThe first time a monitor is connected, the user may have to click several times on the screen for it to register.  \r\nAfter this step, moving the mouse to a different monitor should activate the monitor automatically.  \r\n\r\n*Kwm* requires access to osx accessibility.  Creating a certificate and codesigning the binary works as well.  \r\nTested on Osx El Capitan (10.11.1 / 10.11.2).\r\n\r\n![kwm img](https://cloud.githubusercontent.com/assets/6175959/11850244/6e59e84c-a42c-11e5-832b-6ee3e5ebd8b5.png)\r\n\r\n## Build:\r\n\r\nTo compile and run *Kwm*, simply run\r\n\r\n      make\r\n      ./bin/kwm\r\n\r\nBecause there is no app bundle, *Kwm* has to be started from a terminal.\r\n\r\nBy default, debug prints are enabled, and these can be turned off by runnning\r\n\r\n      make install\r\n\r\nIn addition to this, for *Kwm* to work properly, the user also has to place *Kwmc* in their path.  \r\nSimply move/symlink the `.bin/kwmc` binary to your path.\r\n\r\nIf *Kwm* is added to the path, a launcher script is necessary because it tries to load hotkeys.so from  \r\nthe executables working-directory.\r\n\r\nExample launcher script to be placed in the path instead of the *Kwm* binary.\r\n\r\n    #!/bin/bash\r\n    pushd /path/to/kwm\r\n    ./kwm\r\n    popd\r\n\r\nThe reason for this is that hotkeys.cpp can edited and rebuild separately, and *Kwm* will reload this  \r\nlibrary without having to be restarted and so hotkeys can be edited live.  \r\nIf changes have been made to hotkeys.cpp, run `make` again to recompile this file separately.  \r\n\r\n## Configuration:\r\n\r\nThe default configuration file is `$HOME/.kwmrc` and is a script that contains *Kwmc* commands  \r\nto be executed when *Kwm* starts. This file can be used to blacklist applications and specify  \r\nother settings, as well as run any command not restricted to *Kwmc*.  \r\n\r\nA sample config can be found within the [examples](examples) directory.\r\n\r\n## Usage:\r\n\r\nWhen *Kwm* starts, it will automatically tile the windows of the current space, using binary space partitioning.  \r\nThis will also happen once for any other space the user might switch to.\r\n\r\nWhen *Kwm* detects a new window, it inserts it into a window tree at the specified point using the split-mode specified.  \r\nWhen a window is closed, it will be removed from the window tree and the tree will be rebalanced.\r\n\r\nBy default, the insertion point is the focused window, but the user can mark a temporary insertion point to be\r\nused instead for the next insertion.\r\n\r\nThere are 3 types of split-modes available, these are optimal (width/height ratio), vertical and horizontal.  \r\nThe default split-mode is set to optimal (width/height ratio).\r\n\r\nExample:\r\n\r\n```\r\n            a                       a                       a\r\n           / \\         -->         / \\         -->         / \\    \r\n          1   2                   1   b                   1   b\r\n                                     / \\                     / \\\r\n                                    2   3                   c   3\r\n                                                           / \\\r\n                                                          2   4\r\n\r\n---------------------     ---------------------     --------------------- \r\n|         |         |     |         |         |     |         |    |    |\r\n|         |         |     |         |    2    |     |         | 2  |  4 |\r\n|         |         |     |         |    *    |     |         |    |    |\r\n|    1    |    2    |     |    1    |---------|     |    1    |---------|\r\n|         |    *    |     |         |         |     |         |         |\r\n|         |         |     |         |    3    |     |         |    3    |\r\n|         |         |     |         |         |     |         |         |\r\n---------------------     ---------------------     ---------------------\r\n\r\n```\r\n\r\n*Kwm* mainly consists of three panes so to speak. The main pane being the entire screen.  \r\nAfter at least 1 window insertion has occurred, the screen will consist of either a left and right pane,  \r\nor an upper and lower pane.\r\n\r\nThe width of the left/right pane can be changed, as well as the height of the upper/lower pane.  \r\nCurrently these cannot occur simultaneously, and the type of panes created is decided by the main pane split-mode.\r\n\r\nIf the main pane is split using vertical mode, a left and right pane is created.  \r\nIf the main pane is split using horizontal mode, an upper and lower pane is created.  \r\n\r\n## Default Hotkeys:\r\n    - ctrl+alt+cmd:\r\n        - t: toggle focus-mode (autofocus -> autoraise -> disabled)\r\n        - r: manually resize window to its containersize\r\n        - q: Quit Kwm\r\n\r\n        - m: mark the container to use for next window split\r\n\r\n        - o: use width/height ratio to determine optimal split (default)\r\n        - 7: use vertical split-mode\r\n        - -: use horizontal split-mode\r\n        - s: toggle split-type of existing container\r\n\r\n        - h: move vertical-splitter left (increase width of right-pane containers)\r\n        - l: move vertical-splitter right (increase width of left-pane containers)\r\n        - j: move horizontal-splitter down (increase height of upper-pane containers)\r\n        - k: move horizontal-splitter up (increase height of lower-pane containers)\r\n\r\n        - f: toggle window fullscreen\r\n        - p: toggle window parent container\r\n        - w: toggle window floating\r\n        - enter: opens a new iTerm window\r\n\r\n        YTD player controls:\r\n        - <: toggle playback mode (fav / default)\r\n        - x: toggle play/pause\r\n        - v: stop player\r\n\r\n        - a: increase volume\r\n        - d: decrease volume\r\n        \r\n        - z: play previous video\r\n        - c: play next video\r\n\r\n        - larrow: seek backward\r\n        - rarrow: seek forward\r\n\r\n    - ctrl+alt:\r\n        - p: send window to previous screen\r\n        - n: send window to next screen\r\n\r\n        - 1: send window to screen id 0\r\n        - 2: send window to screen id 1\r\n        - 3: send window to screen id 2\r\n\r\n        - x: increase horizontal gap\r\n        - y: increase vertical gap\r\n\r\n        - larrow: increase screen padding-left \r\n        - rarrow: increase screen padding-right \r\n        - uarrow: increase screen padding-top \r\n        - darrow: increase screen padding-bottom \r\n\r\n    - alt+cmd\r\n        - t: toggle tiling mode of current space (float|tile)\r\n        - r: rotate window-tree by 180 degrees\r\n\r\n        - h: focus previous window\r\n        - l: focus next window\r\n\r\n        - p: swap with the previous window\r\n        - n: swap with the next window\r\n        - m: swap with the marked window\r\n\r\n        - x: decrease horizontal gap\r\n        - y: decrease vertical gap\r\n\r\n        - larrow: decrease screen padding-left \r\n        - rarrow: decrease screen padding-right \r\n        - uarrow: decrease screen padding-top \r\n        - darrow: decrease screen padding-bottom \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}